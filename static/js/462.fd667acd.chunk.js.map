{"version":3,"file":"static/js/462.fd667acd.chunk.js","mappings":"8GAiKA,IAjKiB,CACf,CACEA,GAAI,+BACJC,KAAM,sGACNC,KAAM,mBACNC,YAAY,+DAIZC,MAAO,iDACPC,UAAW,CACTC,KAAM,UACNC,QAAS,UACTC,WAAY,aACZC,QAAS,UACTC,SAAU,WACVC,WAAY,aACZC,QAAS,YACTC,MAAO,QACPC,OAAQ,SACRC,OAAQ,0BACRC,cAAe,kBAEjBC,SAAU,GACVC,WAAY,6DAEd,CACElB,GAAI,YACJC,KAAM,8EACNC,KAAM,0BACNC,YAAY,oZAOZC,MAAO,oDACPC,UAAW,CACTC,KAAM,SACNa,WAAY,aACZV,QAAS,UACTC,SAAU,WACVC,WAAY,aACZS,MAAO,QACPC,MAAO,QACPN,OAAQ,UAEVE,SAAU,GACVC,WAAY,+CAEd,CACElB,GAAI,UACJE,KAAM,mBACND,KAAM,gEACNE,YAAY,i2BAMZC,MAAO,oDACPC,UAAW,CACTiB,KAAM,GACNC,IAAK,GACLC,WAAY,GACZC,MAAO,QACPjB,WAAY,aACZF,KAAM,UACNC,QAAS,UACTG,SAAU,WACVD,QAAS,UACTiB,SAAU,IAEZT,SAAU,GACVC,WAAY,iDAEd,CACElB,GAAI,UACJC,KAAM,yDACNC,KAAM,mBACNC,YAAY,qhBAQZC,MAAO,oDACPC,UAAW,CACTiB,KAAM,GACNC,IAAK,GACLC,WAAY,aACZlB,KAAM,UACNC,QAAS,UACTE,QAAS,UACTgB,MAAO,GACPjB,WAAY,GACZE,SAAU,GACVgB,SAAU,IAEZT,SAAU,GACVC,WAAY,iDAEd,CACElB,GAAI,cACJC,KAAM,cACNC,KAAM,mBACNC,YAAY,4xBAQZC,MAAO,oDACPC,UAAW,CACTiB,KAAM,OACNC,IAAK,MACLC,WAAY,aACZlB,KAAM,GACNC,QAAS,GACTE,QAAS,GACTgB,MAAO,GACPjB,WAAY,GACZE,SAAU,GACVgB,SAAU,IAEZT,SAAU,iDACVC,WAAY,kDAGd,CACElB,GAAI,SACJC,KAAM,SACNC,KAAM,mBACNC,YAAY,wTAKZC,MAAO,oDACPC,UAAW,CACTiB,KAAM,OACNC,IAAK,MACLC,WAAY,GACZC,MAAO,QACPC,SAAU,WACVpB,KAAM,GACNC,QAAS,GACTE,QAAS,GACTD,WAAY,GACZE,SAAU,IAEZO,SAAU,GACVC,WAAY,kD,wGCxJD,SAASS,IACtB,OACE,qBAASC,UAAWC,EAAAA,EAAAA,gBAApB,WACE,0RAOA,gBAAKD,UAAWC,EAAAA,EAAAA,UAAhB,6BAEA,4JAKA,iBAAKD,UAAWC,EAAAA,EAAAA,kBAAhB,WACE,4BACE,kCACA,gDAEF,4BACE,kCACA,wBACGC,EAAAA,EAAAA,QACS,SAACC,GAAD,MAA4B,cAAfA,EAAQ/B,EAArB,IACPgC,SAAQ,SAACD,GAAD,OACPE,OAAOC,OAAOH,EAAQ1B,WAAW8B,KAAI,SAACC,GAAD,OACnC,wBAAiBA,GAARA,EAD0B,GAD9B,UAOf,4BACE,kCACA,cACEC,KAAK,8CACLC,OAAO,SACPC,IAAI,aAHN,gCAUJ,iBAAKX,UAAWC,EAAAA,EAAAA,uBAAhB,WACE,wBACE,gBACEW,IAAG,UAAKC,aAAL,qDACHC,IAAI,UACJd,UAAWC,EAAAA,EAAAA,iBAIf,sDACA,2JAGE,uFAyET,C,mBCxID,KAAgB,gBAAkB,iCAAiC,UAAY,2BAA2B,kBAAoB,mCAAmC,uBAAyB,wCAAwC,YAAc,6BAA6B,gBAAkB,iCAAiC,QAAU,yBAAyB,SAAW,0B","sources":["data/data.js","pages/DbBackup.js","webpack://my-portfolio/./src/pages/styles/project.module.css?5d64"],"sourcesContent":["const projects = [\r\n  {\r\n    id: \"Scalable E-commerce Platform\",\r\n    name: \"Scalable E-Commerce Platform: A modern, microservices-based e-commerce platform built with Docker. \",\r\n    role: \"PERSONAL PROJECT\",\r\n    description: `\r\nUnder development. Visit my Github page to see progress.\r\n`,\r\n\r\n    image: \"/images/projects/Microservice_Architecture.png\",\r\n    languages: {\r\n      Node: \"Node js\",\r\n      Express: \"Express\",\r\n      Typescript: \"Typescript\",\r\n      MongoDB: \"MongoDB\",\r\n      Mongoose: \"Mongoose\",\r\n      PostgreSQL: \"PostgreSQL\",\r\n      Elastic: \"ELK Stack\",\r\n      Nginx: \"NGINX\",\r\n      Consul: \"Consul\",\r\n      Docker: \"Docker & Docker-Compose\",\r\n      GithubActions: \"GitHub Actions\",\r\n    },\r\n    LiveDemo: \"\",\r\n    Githubrepo: \"https://github.com/JonasKhoza/scalable-ecommerce-platform\",\r\n  },\r\n  {\r\n    id: \"db-backup\",\r\n    name: \"db-backup is a command-line tool (CLI) for database backup and restoration.\",\r\n    role: \"WORK & PERSONAL PROJECT\",\r\n    description: `\r\ndb-backup-cliâ€”a command-line utility supporting multi-database backup and restoration (PostgreSQL, MySQL, MongoDB, MSSQL). \r\nThe goal? Boost efficiency, reduce resources, and make life easier for database admins!\r\n\r\nThis started as a personal project to improve our backup process, specifically adding compression across all DBMSs but ended up become an efficient tool to my current employer.\r\n`,\r\n\r\n    image: \"/images/projects/Screenshot 2025-01-29 175548.png\",\r\n    languages: {\r\n      Node: \"Nodejs\",\r\n      TypeScript: \"TypeScript\",\r\n      MongoDB: \"MongoDB\",\r\n      Mongoose: \"Mongoose\",\r\n      PostgreSQL: \"PostgreSQL\",\r\n      MySQL: \"MySQL\",\r\n      MSSQL: \"MSSQL\",\r\n      Docker: \"Docker\",\r\n    },\r\n    LiveDemo: \"\",\r\n    Githubrepo: \"https://github.com/JonasKhoza/db-backup-cli\",\r\n  },\r\n  {\r\n    id: \"vintage\",\r\n    role: \"PERSONAL PROJECT\",\r\n    name: \"Vintage: Your Destination for Tech Treasures and Innovations!\",\r\n    description: `\r\nAt first I had built WEB which is an online store for developers, but performance wise it wasn't great, and I had no  TypeScript in it, so I built this version of a website to improve speed, and performance.  The use of TypeScript ensures robust type-checking, enabling a more reliable and maintainable codebase. I tapped into React performance optimizations, including use of lazy loading. Well thought Mongoose Schemas for performance matters. I added new features, including a well improved built-in admin panel.\r\n\r\nThe most challenging part with the project was about figuring out how to use different technologies to make it fast, scalable and secure. I had to combine JWT, express-session and connect-mongodb-session to handle both authentication and cart creation and saving. And cors presented it's challenges too. View the project to learn more...\r\n  `,\r\n\r\n    image: \"/images/projects/Screenshot 2024-02-18 113951.png\",\r\n    languages: {\r\n      Html: \"\",\r\n      CSS: \"\",\r\n      JavaScript: \"\",\r\n      React: \"React\",\r\n      Typescript: \"TypeScript\",\r\n      Node: \"Node js\",\r\n      Express: \"Express\",\r\n      Mongoose: \"Mongoose\",\r\n      MongoDB: \"MongoDB\",\r\n      Firebase: \"\",\r\n    },\r\n    LiveDemo: \"\",\r\n    Githubrepo: \"https://github.com/JonasKhoza/WEB-online-shop\",\r\n  },\r\n  {\r\n    id: \"eatsome\",\r\n    name: \"EatSome: Discover and Share Your Favorite Restaurants!\",\r\n    role: \"PERSONAL PROJECT\",\r\n    description: `\r\nSometimes getting a list of different restaurants around Harties can be a pain, with all scattered in the nature of it.\r\n\r\nEatSome is a dynamic website where food enthusiasts come together to explore and recommend their top restaurant picks.\r\n\r\nWith secure authentication powered by express-session, you can create an account and start connecting with fellow foodies in no time. Your preferences and recommendations are stored in a MongoDB database using connect-mongodb-session, ensuring a seamless and reliable experience.\r\n  `,\r\n\r\n    image: \"/images/projects/Screenshot 2022-10-15 144635.png\",\r\n    languages: {\r\n      Html: \"\",\r\n      CSS: \"\",\r\n      JavaScript: \"Javascript\",\r\n      Node: \"Node js\",\r\n      Express: \"Express\",\r\n      MongoDB: \"MongoDB\",\r\n      React: \"\",\r\n      Typescript: \"\",\r\n      Mongoose: \"\",\r\n      Firebase: \"\",\r\n    },\r\n    LiveDemo: \"\",\r\n    Githubrepo: \"https://github.com/JonasKhoza/EatSome-website\",\r\n  },\r\n  {\r\n    id: \"tic-tac-toe\",\r\n    name: \"Tic-Tac-Toe\",\r\n    role: \"PERSONAL PROJECT\",\r\n    description: `\r\nExperience the classic game of Tic Tac Toe like never before with my interactive and engaging digital version! Challenge your friends in this timeless game of strategy and wit. With a sleek and intuitive user interface. My Tic Tac Toe game provides a seamless and enjoyable gaming experience.\r\n\r\nImmerse yourself in the battle for three-in-a-row as you strategically place your X's or O's on the grid. Plan your moves carefully, anticipate your opponent's tactics, and aim for victory!\r\n\r\nEnjoy the convenience of playing anytime, anywhere, right from your web browser. Take a break from your daily routine and indulge in a quick game of Tic Tac Toe to sharpen your mind and have fun. So, gather your friends, embrace the nostalgia, and get ready for an exciting game of Tic Tac Toe!\"\r\n    `,\r\n\r\n    image: \"/images/projects/Screenshot 2022-10-15 144126.png\",\r\n    languages: {\r\n      Html: \"HTML\",\r\n      CSS: \"CSS\",\r\n      JavaScript: \"Javascript\",\r\n      Node: \"\",\r\n      Express: \"\",\r\n      MongoDB: \"\",\r\n      React: \"\",\r\n      Typescript: \"\",\r\n      Mongoose: \"\",\r\n      Firebase: \"\",\r\n    },\r\n    LiveDemo: \"https://jonaskhoza.github.io/Tic-Tac-Toe-Game/\",\r\n    Githubrepo: \"https://github.com/JonasKhoza/Tic-Tac-Toe-Game\",\r\n  },\r\n\r\n  {\r\n    id: \"meetup\",\r\n    name: \"Meetup\",\r\n    role: \"PERSONAL PROJECT\",\r\n    description: `\r\nMeetup is all people place, have an idea for a meetup place? Visit Meetup and browse through meetup events around the world.\r\nThe purpose of this project was to test my skills about React, react-router-dom skills and how I can utilize Firebase API to save and retrieve data submitted through a form.\r\n      `,\r\n\r\n    image: \"/images/projects/Screenshot 2022-10-15 144952.png\",\r\n    languages: {\r\n      Html: \"HTML\",\r\n      CSS: \"CSS\",\r\n      JavaScript: \"\",\r\n      React: \"React\",\r\n      Firebase: \"Firebase\",\r\n      Node: \"\",\r\n      Express: \"\",\r\n      MongoDB: \"\",\r\n      Typescript: \"\",\r\n      Mongoose: \"\",\r\n    },\r\n    LiveDemo: \"\",\r\n    Githubrepo: \"https://github.com/JonasKhoza/Meetup-React-App\",\r\n  },\r\n];\r\n\r\nexport default projects;\r\n","import React from \"react\";\r\n\r\nimport c from \"./styles/project.module.css\";\r\nimport projects from \"../data/data\";\r\n\r\nexport default function Vintage() {\r\n  return (\r\n    <section className={c.project_details}>\r\n      <h1>\r\n        db-backup is a command-line tool (CLI) for database backup and\r\n        restoration. It supports multiple databases (MySQL, PostgreSQL, MongoDB,\r\n        MSSQL) and allows backup storage in various locations (local, AWS S3,\r\n        Google Cloud Storage, and Azure Blob Storage).\r\n      </h1>\r\n\r\n      <div className={c.read_time}>2 minute read </div>\r\n\r\n      <p>\r\n        Note: Project is not yet fully completed and tested. Only PostgreSQL and\r\n        MSSQL have been tested for all commands and work well.\r\n      </p>\r\n\r\n      <div className={c.project_resources}>\r\n        <div>\r\n          <h3>Type</h3>\r\n          <p>Personal project</p>\r\n        </div>\r\n        <div>\r\n          <h3>Tech</h3>\r\n          <ul>\r\n            {projects\r\n              .filter((project) => project.id === \"db-backup\") // Filter first\r\n              .flatMap((project) =>\r\n                Object.values(project.languages).map((skill) => (\r\n                  <li key={skill}>{skill}</li>\r\n                ))\r\n              )}\r\n          </ul>\r\n        </div>\r\n        <div>\r\n          <h3>Live</h3>\r\n          <a\r\n            href=\"https://github.com/JonasKhoza/db-backup-cli\"\r\n            target=\"_blank\"\r\n            rel=\"noreferrer\"\r\n          >\r\n            Github repo\r\n          </a>\r\n        </div>\r\n      </div>\r\n\r\n      <div className={c.project_desc_container}>\r\n        <p>\r\n          <img\r\n            src={`${process.env.PUBLIC_URL}/images/projects/Screenshot 2025-01-29 175548.png`}\r\n            alt=\"Project\"\r\n            className={c.project_img}\r\n          />\r\n        </p>\r\n\r\n        <h2>Project Purpose and Goal</h2>\r\n        <p>\r\n          This started as a personal project to improve our(workplace) backup\r\n          process, specifically adding compression across all DBMSs,\r\n          <span>to reduce file size and automate backup process.</span>\r\n        </p>\r\n        {/* <h2>Web Stack and Explanation</h2>\r\n        <p>\r\n          Built the project using a blend of React because of its powerful\r\n          server-side rendering and dynamic routing and it's ability to power\r\n          modern web development to deliver a lightning-fast website. The use of{\" \"}\r\n          <span>TypeScript</span> ensures robust type-checking, enabling a more\r\n          reliable and maintainable codebase. The backend is powered by{\" \"}\r\n          <span>Express with TypeScript</span> to power the REST API.\r\n          Authentication was built using{\" \"}\r\n          <span>JWT and express-session and connect-mongodb-express</span> was\r\n          used to handle cart functionalities and the use of{\" \"}\r\n          <span>cookies</span>.\r\n        </p>\r\n        <p>\r\n          For the databse I used <span>MongoDB.</span> I generated the{\" \"}\r\n          <span>MongoDB schema using Mongoose.</span>\r\n        </p>\r\n        <p>\r\n          To ensure code stability and site performance, I implemented\r\n          TypeScript type-checking, React performance optimization with lazy\r\n          loading, react hooks, a well thought database schema.\r\n        </p>\r\n        <h2>Problems and Thought Process</h2>\r\n        <p>\r\n          While building Vintage, I paid special attention to the design of\r\n          Mongoose schemas, ensuring a solid foundation for the backend.\r\n          <span>However, challenges </span>arose when it came to handling user\r\n          addresses.{\" \"}\r\n          <span>\r\n            I happen to have separated the User schema from the Address schema\r\n            and leaving no link at all on User schema but providing one on the\r\n            Address schema.\r\n          </span>{\" \"}\r\n          In retrospect, incorporating a default address within the User schema\r\n          could have simplified the process, eliminating the need for separate\r\n          address mappings. Nonetheless, I made efficient use of separate\r\n          queries to retrieve addresses when necessary.\r\n        </p>\r\n        <h2>Lessons Learned & Future Work</h2>\r\n        <p>\r\n          In addition, tackling the frontend-server connection proved to be a\r\n          learning experience. From initially using CORS with specific options\r\n          to enable cross-origin requests, upon CORS not working, I refined the\r\n          solution to allow the frontend application origin, support\r\n          credentials, specify allowed HTTP methods, and define allowed\r\n          headersâ€”fostering seamless communication between the React frontend\r\n          and the server.\r\n          <span>\r\n            The truth of software development is there's never a one way to kill\r\n            a rat and this is the most beautiful part of it.\r\n          </span>\r\n          <span className={c.challenge_faced}>\r\n            <span>\r\n              <span className={c.problem}>The problem.</span>\r\n              <img\r\n                src={`${process.env.PUBLIC_URL}/images/code/Screenshot 2024-01-22 100624.png`}\r\n                alt=\"cors code problem\"\r\n              />\r\n            </span>\r\n            <span>\r\n              <span className={c.solution}>The solution.</span>\r\n              <img\r\n                src={`${process.env.PUBLIC_URL}/images/code/Screenshot 2024-02-17 100148.png`}\r\n                alt=\"cors code solution\"\r\n              />\r\n            </span>\r\n          </span>\r\n        </p> */}\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"project_details\":\"project_project_details__m7Qre\",\"read_time\":\"project_read_time__i5uct\",\"project_resources\":\"project_project_resources__tgkNA\",\"project_desc_container\":\"project_project_desc_container__fKtCa\",\"project_img\":\"project_project_img__rboFU\",\"challenge_faced\":\"project_challenge_faced__Btjtm\",\"problem\":\"project_problem__vfwAh\",\"solution\":\"project_solution__TP085\"};"],"names":["id","name","role","description","image","languages","Node","Express","Typescript","MongoDB","Mongoose","PostgreSQL","Elastic","Nginx","Consul","Docker","GithubActions","LiveDemo","Githubrepo","TypeScript","MySQL","MSSQL","Html","CSS","JavaScript","React","Firebase","Vintage","className","c","projects","project","flatMap","Object","values","map","skill","href","target","rel","src","process","alt"],"sourceRoot":""}